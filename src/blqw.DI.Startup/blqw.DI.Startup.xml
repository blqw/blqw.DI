<?xml version="1.0"?>
<doc>
    <assembly>
        <name>blqw.DI.Startup</name>
    </assembly>
    <members>
        <member name="T:blqw.DI.Extensions">
            <summary>
            扩展方法
            </summary>
        </member>
        <member name="M:blqw.DI.Extensions.GetParameterValue(System.IServiceProvider,System.Reflection.ParameterInfo)">
            <summary>
            尝试从服务器提供程序中获取方法参数的值
            </summary>
            <param name="serviceProvider"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:blqw.DI.Extensions.FindTypes(System.Reflection.Assembly,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            查找程序集中被 AssemblyStartupAttribute 标识的启动类
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="T:blqw.DI.LogExtensions">
            <summary>
            日志相关扩展方法
            </summary>
        </member>
        <member name="M:blqw.DI.LogExtensions.Log(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel,System.Object,System.Exception,System.String,System.String,System.Int32)">
            <summary>
            标准日志输出
            </summary>
        </member>
        <member name="M:blqw.DI.LogExtensions.Error(Microsoft.Extensions.Logging.ILogger,System.Exception,System.Object,System.String,System.String,System.Int32)">
            <summary>
            错误日志输出
            </summary>
        </member>
        <member name="M:blqw.DI.LogExtensions.Critical(Microsoft.Extensions.Logging.ILogger,System.Exception,System.Object,System.String,System.String,System.Int32)">
            <summary>
            严重错误日志输出
            </summary>
        </member>
        <member name="M:blqw.DI.LogExtensions.Log(Microsoft.Extensions.Logging.ILogger,System.Object,System.Exception,System.String,System.String,System.Int32)">
            <summary>
            标准日志输出
            </summary>
        </member>
        <member name="M:blqw.DI.LogExtensions.Debug(Microsoft.Extensions.Logging.ILogger,System.Object,System.Exception,System.String,System.String,System.Int32)">
            <summary>
            调试日志输出
            </summary>
        </member>
        <member name="M:blqw.DI.LogExtensions.Info(Microsoft.Extensions.Logging.ILogger,System.Object,System.Exception,System.String,System.String,System.Int32)">
            <summary>
            普通信息日志输出
            </summary>
        </member>
        <member name="M:blqw.DI.LogExtensions.Warn(Microsoft.Extensions.Logging.ILogger,System.Object,System.Exception,System.String,System.String,System.Int32)">
            <summary>
            警告日志输出
            </summary>
        </member>
        <member name="M:blqw.DI.LogExtensions.SetLoggerIfAbsent``1(``0,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            如果目标实例为<seealso cref="T:blqw.DI.ILoggable"/>> ,且 <seealso cref="P:blqw.DI.ILoggable.Logger"/>  属性为空, 则设置为指定的日志组件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:blqw.DI.LogExtensions.SetLogger``1(``0,Microsoft.Extensions.Logging.ILogger,System.Boolean)">
            <summary>
            设置目标实例为<seealso cref="T:blqw.DI.ILoggable"/>> ,则设置 <seealso cref="P:blqw.DI.ILoggable.Logger"/> 属性为指定的日志组件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="logger"></param>
            <param name="replace">如果参数为true则无条件替换, 否则当目标实例Logger属性不为空时不执行任何操作</param>
            <returns></returns>
        </member>
        <member name="M:blqw.DI.LogExtensions.GetLogger``1(System.IServiceProvider)">
            <summary>
            获取日志服务
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:blqw.DI.StartupExtensions">
            <summary>
            公开的扩展方法
            </summary>
        </member>
        <member name="M:blqw.DI.StartupExtensions.LoadAllAssemblies(System.AppDomain,System.String)">
            <summary>
            从指定路径载入所有程序集
            </summary>
            <param name="domain"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:blqw.DI.StartupExtensions.LoadAllAssemblies(System.AppDomain)">
            <summary>
            载入所有程序集
            </summary>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:blqw.DI.StartupExtensions.FindStartupTypesByAttribute(System.Reflection.Assembly)">
            <summary>
            根据 <seealso cref="!:AssemblyStartupAttribute"/> 特性查找启动类
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:blqw.DI.StartupExtensions.FindStartupTypesByAttribute(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            根据 <seealso cref="!:AssemblyStartupAttribute"/> 特性查找启动类
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:blqw.DI.StartupExtensions.FindStartupTypesByAttribute(System.AppDomain)">
            <summary>
            根据 <seealso cref="!:AssemblyStartupAttribute"/> 特性查找启动类
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:blqw.DI.StartupExtensions.FindStartupTypesByName(System.Reflection.Assembly)">
            <summary>
            查找 类型名称为 Startup 的启动类
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:blqw.DI.StartupExtensions.FindStartupTypesByName(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            查找 类型名称为 Startup 的启动类
            </summary>
        </member>
        <member name="M:blqw.DI.StartupExtensions.FindStartupTypesByName(System.AppDomain)">
            <summary>
            查找 类型名称为 Startup 的启动类
            </summary>
        </member>
        <member name="M:blqw.DI.StartupExtensions.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,blqw.DI.IStartup)">
            <summary>
            调用启动器的配置服务并注册启动器
            </summary>
        </member>
        <member name="M:blqw.DI.StartupExtensions.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            调用启动类中的 ConfigureServices 方法来配置服务
            </summary>
            <param name="services"></param>
            <param name="startupTypes">待调用 ConfigureServices 的启动类</param>
            <returns></returns>
        </member>
        <member name="M:blqw.DI.StartupExtensions.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            根据 <seealso cref="!:AssemblyStartupAttribute"/> 特性查找启动类, 并调用启动类中的 ConfigureServices 方法来配置服务
            </summary>
        </member>
        <member name="M:blqw.DI.StartupExtensions.Configure(System.IServiceProvider)">
            <summary>
            安装服务
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="T:blqw.DI.ILoggable">
            <summary>
            可记录日志的
            </summary>
        </member>
        <member name="P:blqw.DI.ILoggable.Logger">
            <summary>
            日志记录
            </summary>
        </member>
        <member name="T:blqw.DI.IStartup">
            <summary>
            启动器接口
            </summary>
        </member>
        <member name="M:blqw.DI.IStartup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            配置服务
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:blqw.DI.IStartup.Configure(System.IServiceProvider)">
            <summary>
            安装服务
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:blqw.DI.PrestoreLogger.WriteTo(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            将缓存日志写入到指定的日志组件
            </summary>
            <param name="logger"></param>
        </member>
        <member name="T:blqw.DI.ServiceCollection">
            <summary>
            服务集合
            </summary>
        </member>
        <member name="T:blqw.DI.ServiceCollectionDecorator">
            <summary>
            服务集合装饰器，主要用于替换和增强对于委托类型服务的支持
            </summary>
        </member>
        <member name="T:blqw.DI.Startup">
            <summary>
            启动器总线
            </summary>
        </member>
        <member name="M:blqw.DI.Startup.CreateServiceCollection">
            <summary>
            创建一个 <seealso cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            </summary>
        </member>
        <member name="M:blqw.DI.Startup.ConfigureServices">
            <summary>
            根据 <seealso cref="!:AssemblyStartupAttribute"/> 特性查找启动类, 并调用启动类中的 ConfigureServices 方法来配置服务，返回服务集合
            </summary>
            <returns>返回服务集合</returns>
        </member>
        <member name="M:blqw.DI.Startup.Configure(System.IServiceProvider)">
            <summary>
            安装服务
            </summary>
            <param name="serviceProvider">服务提供程序</param>
        </member>
        <member name="T:blqw.DI.ActionStartup">
            <summary>
            基于委托构造的安装器
            </summary>
        </member>
        <member name="T:blqw.DI.AggregateStartup">
            <summary>
            服务聚合启动器
            </summary>
        </member>
        <member name="F:blqw.DI.AggregateStartup._startups">
            <summary>
            启动器代理
            </summary>
        </member>
        <member name="M:blqw.DI.AggregateStartup.Create(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            创建聚合启动器
            </summary>
            <param name="startupTypes"></param>
            <returns></returns>
        </member>
        <member name="M:blqw.DI.AggregateStartup.#ctor(System.Collections.Generic.IEnumerable{blqw.DI.IStartup})">
            <summary>
            初始化服务聚合启动器
            </summary>
            <param name="startups">启动类</param>
        </member>
        <member name="M:blqw.DI.AggregateStartup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            从启动类配置服务
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:blqw.DI.AggregateStartup.Configure(System.IServiceProvider)">
            <summary>
            安装服务到启动类
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="T:blqw.DI.StartupProxy">
            <summary>
            启动器代理程序
            </summary>
        </member>
        <member name="M:blqw.DI.StartupProxy.#ctor(System.Type)">
            <summary>
            初始化启动器代理
            </summary>
            <param name="startupType">启动器类</param>
        </member>
        <member name="P:blqw.DI.StartupProxy.Exception">
            <summary>
            无效代理的错误原因
            </summary>
        </member>
        <member name="P:blqw.DI.StartupProxy.StartupType">
            <summary>
            启动器类型
            </summary>
        </member>
        <member name="P:blqw.DI.StartupProxy.SetupInstance">
            <summary>
            启动器实例
            </summary>
        </member>
        <member name="M:blqw.DI.StartupProxy.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            调用被代理对象的配置服务方法
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:blqw.DI.StartupProxy.Configure(System.IServiceProvider)">
            <summary>
            调用被代理对象的安装服务方法
            </summary>
            <param name="serviceProvider"></param>
        </member>
    </members>
</doc>
